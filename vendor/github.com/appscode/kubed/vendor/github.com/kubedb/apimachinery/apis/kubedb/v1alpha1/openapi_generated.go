// +build !ignore_autogenerated

/*
Copyright 2018 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"container": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"cronExpression": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"storageSecretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec"),
							},
						},
						"s3": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec"),
							},
						},
						"gcs": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec"),
							},
						},
						"azure": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec"),
							},
						},
						"swift": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec", "k8s.io/api/core/v1.ResourceRequirements"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabase": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of DormantDatabase CRD objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabase"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabase", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"wipeOut": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, invoke wipe out operation",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"resume": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, resumes database",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"origin": {
							SchemaProps: spec.SchemaProps{
								Description: "Origin to store original database information",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Origin"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Origin"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.DormantDatabaseStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"pausingTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"wipeOutTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Elasticsearch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Elasticsearch defines a Elasticsearch database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchClusterTopology": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"master": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode"),
							},
						},
						"data": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode"),
							},
						},
						"client": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of Elasticsearch CRD objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Elasticsearch"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Elasticsearch", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of Elasticsearch to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a Elasticsearch database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"topology": {
							SchemaProps: spec.SchemaProps{
								Description: "Elasticsearch topology for node specification",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchClusterTopology"),
							},
						},
						"enableSSL": {
							SchemaProps: spec.SchemaProps{
								Description: "To enable ssl in transport & http layer",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"certificateSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret with SSL certificates",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"databaseSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "Database authentication secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage to specify how storage shall be used.",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"init": {
							SchemaProps: spec.SchemaProps{
								Description: "Init is used to initialize database",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec"),
							},
						},
						"backupSchedule": {
							SchemaProps: spec.SchemaProps{
								Description: "BackupSchedule spec to specify how database backup will be taken",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec"),
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Elasticsearch object. Controller will create same Elasticsearch object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchClusterTopology", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Following structure is used for audit summary report",
					Properties: map[string]spec.Schema{
						"idCount": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int64",
										},
									},
								},
							},
						},
						"mapping": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"object"},
								Format: "",
							},
						},
						"setting": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"object"},
								Format: "",
							},
						},
					},
					Required: []string{"idCount", "mapping", "setting"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"bucket": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"bucket"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"scriptSource": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ScriptSourceSpec"),
							},
						},
						"snapshotSource": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSourceSpec"),
							},
						},
						"postgresWAL": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresWALSourceSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresWALSourceSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ScriptSourceSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSourceSpec"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"emptyDir": {
							SchemaProps: spec.SchemaProps{
								Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
								Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
							},
						},
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"gitRepo": {
							SchemaProps: spec.SchemaProps{
								Description: "GitRepo represents a git repository at a particular revision.",
								Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
							},
						},
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md",
								Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"persistentVolumeClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"downwardAPI": {
							SchemaProps: spec.SchemaProps{
								Description: "DownwardAPI represents downward API about the pod that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
							},
						},
						"configMap": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigMap represents a configMap that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"projected": {
							SchemaProps: spec.SchemaProps{
								Description: "Items for all in one resources secrets, configmaps, and downward API",
								Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
							},
						},
						"mountPath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"subPath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Memcached": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Memcached defines a Memcached database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of Memcached TPR objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Memcached"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Memcached", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of Memcached to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a Memcached database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Postgres object. Controller will create same Postgres object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDB": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "MongoDB defines a MongoDB database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of MongoDB TPR objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDB"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDB", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of MongoDB to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a MongoDB database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage spec to specify how storage shall be used.",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"databaseSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "Database authentication secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"init": {
							SchemaProps: spec.SchemaProps{
								Description: "Init is used to initialize database",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec"),
							},
						},
						"backupSchedule": {
							SchemaProps: spec.SchemaProps{
								Description: "BackupSchedule spec to specify how database backup will be taken",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec"),
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Postgres object. Controller will create same Postgres object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQL": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Mysql defines a Mysql database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of MySQL TPR objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQL"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQL", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of MySQL to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a MySQL database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage spec to specify how storage shall be used.",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"databaseSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "Database authentication secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"init": {
							SchemaProps: spec.SchemaProps{
								Description: "Init is used to initialize database",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec"),
							},
						},
						"backupSchedule": {
							SchemaProps: spec.SchemaProps{
								Description: "BackupSchedule spec to specify how database backup will be taken",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec"),
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Mysql object. Controller will create same Mysql object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Origin": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Origin Spec to store original database Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.OriginSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.OriginSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.OriginSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"elasticsearch": {
							SchemaProps: spec.SchemaProps{
								Description: "Elasticsearch Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSpec"),
							},
						},
						"postgres": {
							SchemaProps: spec.SchemaProps{
								Description: "Postgres Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSpec"),
							},
						},
						"mysql": {
							SchemaProps: spec.SchemaProps{
								Description: "MySQL Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLSpec"),
							},
						},
						"mongodb": {
							SchemaProps: spec.SchemaProps{
								Description: "MongoDB Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBSpec"),
							},
						},
						"redis": {
							SchemaProps: spec.SchemaProps{
								Description: "Redis Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisSpec"),
							},
						},
						"memcached": {
							SchemaProps: spec.SchemaProps{
								Description: "Memcached Spec",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MemcachedSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MongoDBSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.MySQLSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisSpec"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Postgres": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Postgres defines a Postgres database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresArchiverSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"storage": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStorageSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStorageSpec"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of Postgres CRD objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Postgres"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Postgres", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSchemaInfo": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"table": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresTableInfo"),
										},
									},
								},
							},
						},
					},
					Required: []string{"table"},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresTableInfo"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of Postgres to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a Postgres database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"standby": {
							SchemaProps: spec.SchemaProps{
								Description: "Standby mode",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"streaming": {
							SchemaProps: spec.SchemaProps{
								Description: "Streaming mode",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"archiver": {
							SchemaProps: spec.SchemaProps{
								Description: "Archive for wal files",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresArchiverSpec"),
							},
						},
						"databaseSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "Database authentication secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage to specify how storage shall be used.",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"init": {
							SchemaProps: spec.SchemaProps{
								Description: "Init is used to initialize database",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec"),
							},
						},
						"backupSchedule": {
							SchemaProps: spec.SchemaProps{
								Description: "BackupSchedule spec to specify how database backup will be taken",
								Ref:         ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec"),
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Postgres object. Controller will create same Postgres object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.BackupScheduleSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.InitSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresArchiverSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"schema": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSchemaInfo"),
										},
									},
								},
							},
						},
					},
					Required: []string{"schema"},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSchemaInfo"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresTableInfo": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Following structures are used for audit summary report",
					Properties: map[string]spec.Schema{
						"totalRow": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
						"maxId": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
						"nextId": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
					Required: []string{"totalRow", "maxId", "nextId"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresWALSourceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"backupName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pitr": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"storageSecretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec"),
							},
						},
						"s3": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec"),
							},
						},
						"gcs": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec"),
							},
						},
						"azure": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec"),
							},
						},
						"swift": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Redis": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Redis defines a Redis database.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of Redis TPR objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Redis"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Redis", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "Version of Redis to be deployed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of instances to deploy for a Redis database.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage spec to specify how storage shall be used.",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a selector which must be true for the pod to fit on a node",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"doNotPause": {
							SchemaProps: spec.SchemaProps{
								Description: "If DoNotPause is true, controller will prevent to delete this Postgres object. Controller will create same Postgres object and ignore other process.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"monitor": {
							SchemaProps: spec.SchemaProps{
								Description: "Monitor is used monitor database instance",
								Ref:         ref("github.com/appscode/kube-mon/api.AgentSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's scheduling constraints",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"schedulerName": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tolerations": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the pod's tolerations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
						"imagePullSecrets": {
							SchemaProps: spec.SchemaProps{
								Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/appscode/kube-mon/api.AgentSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.RedisStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"creationTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Report": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"summary": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportSummary"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportStatus", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportSummary", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ReportSummary": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"postgres": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSummary"),
										},
									},
								},
							},
						},
						"elastic": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSummary"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ElasticsearchSummary", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.PostgresSummary"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"endpoint": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"bucket": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"bucket"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.ScriptSourceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"scriptPath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"hostPath": {
							SchemaProps: spec.SchemaProps{
								Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
								Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
							},
						},
						"emptyDir": {
							SchemaProps: spec.SchemaProps{
								Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
								Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
							},
						},
						"gcePersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
								Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
							},
						},
						"awsElasticBlockStore": {
							SchemaProps: spec.SchemaProps{
								Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
								Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
							},
						},
						"gitRepo": {
							SchemaProps: spec.SchemaProps{
								Description: "GitRepo represents a git repository at a particular revision.",
								Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
							},
						},
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
								Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
							},
						},
						"nfs": {
							SchemaProps: spec.SchemaProps{
								Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
								Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
							},
						},
						"iscsi": {
							SchemaProps: spec.SchemaProps{
								Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md",
								Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
							},
						},
						"glusterfs": {
							SchemaProps: spec.SchemaProps{
								Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
								Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
							},
						},
						"persistentVolumeClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
								Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
							},
						},
						"rbd": {
							SchemaProps: spec.SchemaProps{
								Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
								Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
							},
						},
						"flexVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
								Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
							},
						},
						"cinder": {
							SchemaProps: spec.SchemaProps{
								Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
								Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
							},
						},
						"cephfs": {
							SchemaProps: spec.SchemaProps{
								Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
							},
						},
						"flocker": {
							SchemaProps: spec.SchemaProps{
								Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
								Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
							},
						},
						"downwardAPI": {
							SchemaProps: spec.SchemaProps{
								Description: "DownwardAPI represents downward API about the pod that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
							},
						},
						"fc": {
							SchemaProps: spec.SchemaProps{
								Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
								Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
							},
						},
						"azureFile": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
							},
						},
						"configMap": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigMap represents a configMap that should populate this volume",
								Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
							},
						},
						"vsphereVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
							},
						},
						"quobyte": {
							SchemaProps: spec.SchemaProps{
								Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
								Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
							},
						},
						"azureDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
								Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
							},
						},
						"photonPersistentDisk": {
							SchemaProps: spec.SchemaProps{
								Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
							},
						},
						"projected": {
							SchemaProps: spec.SchemaProps{
								Description: "Items for all in one resources secrets, configmaps, and downward API",
								Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
							},
						},
						"portworxVolume": {
							SchemaProps: spec.SchemaProps{
								Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
								Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
							},
						},
						"scaleIO": {
							SchemaProps: spec.SchemaProps{
								Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
							},
						},
						"storageos": {
							SchemaProps: spec.SchemaProps{
								Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
								Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Snapshot": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of Snapshot CRD objects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Snapshot"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.Snapshot", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSourceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"databaseName": {
							SchemaProps: spec.SchemaProps{
								Description: "Database name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"storageSecretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec"),
							},
						},
						"s3": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec"),
							},
						},
						"gcs": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec"),
							},
						},
						"azure": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec"),
							},
						},
						"swift": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"),
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "Compute Resources required by the sidecar container.",
								Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec", "k8s.io/api/core/v1.ResourceRequirements"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"phase": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SnapshotStorageSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"storageSecretName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"local": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec"),
							},
						},
						"s3": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec"),
							},
						},
						"gcs": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec"),
							},
						},
						"azure": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec"),
							},
						},
						"swift": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.AzureSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.GCSSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.LocalSpec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.S3Spec", "github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec"},
		},
		"github.com/kubedb/apimachinery/apis/kubedb/v1alpha1.SwiftSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"container": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"prefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
	}
}
